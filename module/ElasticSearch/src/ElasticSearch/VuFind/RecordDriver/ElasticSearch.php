<?php
/**
 * Created by IntelliJ IDEA.
 * User: boehm
 * Date: 30.11.17
 * Time: 10:14
 */
namespace ElasticSearch\VuFind\RecordDriver;

use VuFind\RecordDriver\AbstractBase;

class ElasticSearch extends AbstractBase
{
    protected $sourceIdentifier = 'ElasticSearch';

    /**
     * Get text that can be displayed to represent this record in breadcrumbs.
     *
     * @return string Breadcrumb text to represent this record.
     */
    public function getBreadcrumb()
    {
        // TODO: Implement getBreadcrumb() method.
    }

    /**
     * Return the unique identifier of this record for retrieving additional
     * information (like tags and user comments) from the external MySQL database.
     *
     * @return string Unique identifier.
     */
    public function getUniqueID()
    {
        return $this->fields["_id"];
    }

    // TODO Move to ElasticSearch Person RecordDriver
    public function getFirstName()
    {
        return $this->fields["_source"]['foaf:firstName'];
    }

    public function getLastName()
    {
        return $this->fields["_source"]['foaf:lastName'];
    }

    public function getName()
    {
        return $this->fields["_source"]['rdfs:label'];
    }

    public function getBirthDate()
    {
        $date = $this->fields["_source"]['dbp:birthDate'];
        if ($date !== null)
        {
            return new \DateTime($date);
        }
        return null;
    }

    // TODO Move to ElasticSearch Bibliographic Resource RecordDriver
    public function getContributors(): array
    {
        return $this->getIdFromUrlSource('dct:contributor');
    }
    public function getTopics(): array
    {
        return $this->getIdFromUrlSource('dct:subject');
    }

    public function setRawData($data)
    {
        parent::setRawData($data); // TODO: Change the autogenerated stub
    }

    public function getType()
    {
        return $this->fields["_type"];
    }

    /**
     * @param $field
     * @return mixed
     */
    protected function getIdFromUrlSource($field)
    {
        $contributors = $this->fields["_source"][$field];
        preg_match_all("/\/([\w-]+),/", implode(",", $contributors), $matches);
        return $matches[1];
    }

}
